template(name="inputKey")
  button.input-key($b="click : parent.handleInputKey(value), text : text")
    
template(name="problem")
  .ui.modal($b="ref : textBookModal")
    .header
      .ui.header($b="text : ü('HilfeZurAufgabe')")
    .content
      +mathjax
        |{{{textBook}}}
    .actions
      .ui.circular.cancel.icon.button
        i.arrow.left.icon
        | Zurück zur Aufgabe
  unless currentUser
    +mustBeLoggedIn
  else      
    .ui.text.container
      .ui.grid
        .nine.wide.column
          h3.header($b="text : title")
        .seven.wide.right.aligned.column
          //.ui.blue.circular.label Level #{currentLevel}
          if currentUser
            +moduleScoreDisplay(moduleKey=moduleKey userId=userId)
      .ui.segment
        .flexContainer(style="{justify-content : space-between}")
          h4.ui.header($b="text : description")
          div(style="{padding-left:5px}")
            .ui.tiny.circular.icon.button($b="enable : hasTextBook, click : showTextBook")
              i.help.icon
        if customTemplateName
          +Template.dynamic(template=customTemplateName data=customTemplateData)
        else
          unless skipExpression
            +teXDisplay(teX=problemTeX)
          if drawSVG
            .ui.center.aligned.container
              with SVGData
                +renderSVG
          if drawFunctionPlot
            .ui.center.aligned.container
              with functionData
                +renderFunctionTemplate
        p($b="text : hint")
      .ui.segment
        .ui.grid
          .twelve.wide.column
            h4.header($b="text : ü('Antwort')")
          .four.wide.right.aligned.column
            i.icon($b="toggle : showPreview, class : previewIconClass")
        if showPreview
          +teXDisplay(teX=preview)
        if useKeypad
          .text-input-div
            span.text-input-span($b="text : answer")
        else
          .ui.fluid.input
            input($b="value : answer, enter : checkAnswer, focus : focusOnAnswer, attr : {placeholder : ü('AntwortPlaceholder')}" type="text")
      if useKeypad
        unless answered
          .ui.grey.inverted.segment.input-pad($b="style : style")
            each inputKeys
              +inputKey
            
      if answered
        if answerCorrect
          .ui.green.inverted.center.aligned.segment
            h2.header($b="text : ü('Richtig')")
        else
          .ui.red.inverted.center.aligned.segment
            h3.header($b="text : ü('NichtRichtig')")
        each failTextsRequired
          .ui.red.inverted.center.aligned.segment
            h4.header($b="text : this")
        each failTextsOptional
          .ui.yellow.inverted.center.aligned.segment
            h4.header($b="text : this")
        unless answerCorrect
          each passTextsRequired
            .ui.green.inverted.center.aligned.segment
              h4.header($b="text : this")
          each passTextsOptional
            .ui.green.inverted.center.aligned.segment
              h4.header($b="text : this")
        .ui.segment
          h4.header($b="text : ü('Lösung')")
          +teXDisplay(teX=solutionTeX)
      div    
        button.ui.left.floated.grey.inverse.icon.button($b="toggle : forceUseOtherKeyboard")
          i.keyboard.icon
        .ui.blue.icon.buttons($b="ref : levelButtons")
          button.ui.icon.button($b="click : easier, disable : autoLevelOn, attr : {title : ü('LevelVerringern')}")
            i.minus.icon
          button.ui.button($b="click : harder, disable : autoLevelOn, attr : {title : ü('LevelErhöhen')}")
            i.plus.icon
          button.ui.icon.button($b="toggle : autoLevelOn, enable : loggedIn, attr : {title : ü('LevelAutomatischAnpassen')}")
            i.setting.icon($b="class : {loading : autoLevelOn}")
            | Level {{currentLevel}}
        if answered
          button.ui.right.floated.green.icon.button($b="click : newProblem")
            | weiter
            i.arrow.right.icon
        else
          button.ui.right.floated.red.icon.button($b="click : checkAnswer") OK
